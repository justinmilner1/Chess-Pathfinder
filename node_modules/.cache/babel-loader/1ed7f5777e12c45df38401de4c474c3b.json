{"ast":null,"code":"// Performs A* algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar2(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const col = startNode.col,\n        row = startNode.row;\n  console.log(\"col: \" + col);\n  console.log(\"row:\" + row);\n  startNode.distance = 0;\n  console.log(\"grid: \" + grid[0]);\n  startNode.heuristic = Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n  console.log(\"sNode: \" + startNode.heuristic);\n  const unvisitedNodes = getAllNodes(grid); //   for (var node in unvisitedNodes) {\n  //     node.heuristic =\n  //       Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n  //   }\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByHeuristic(unvisitedNodes); //i think heuristic value for each node needs to be set (showing up as undefined currently)\n\n    const closestNode = unvisitedNodes.shift();\n    console.log(\"cNode: \" + closestNode.heuristic); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByHeuristic(unvisitedNodes) {\n  //need to make this sortNodesByHeuristic\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.heuristic - nodeB.heuristic);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  const col = node.col,\n        row = node.row;\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n    neighbor.heuristic = Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/algorithms/AStar2.js"],"names":["AStar2","grid","startNode","finishNode","visitedNodesInOrder","col","row","console","log","distance","heuristic","Math","pow","abs","unvisitedNodes","getAllNodes","length","sortNodesByHeuristic","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["// Performs A* algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar2(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const { col, row } = startNode;\n\n  console.log(\"col: \" + col);\n  console.log(\"row:\" + row);\n  startNode.distance = 0;\n  console.log(\"grid: \" + grid[0]);\n  startNode.heuristic =\n    Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n  console.log(\"sNode: \" + startNode.heuristic);\n  const unvisitedNodes = getAllNodes(grid);\n  //   for (var node in unvisitedNodes) {\n  //     node.heuristic =\n  //       Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n  //   }\n  while (!!unvisitedNodes.length) {\n    sortNodesByHeuristic(unvisitedNodes); //i think heuristic value for each node needs to be set (showing up as undefined currently)\n    const closestNode = unvisitedNodes.shift();\n    console.log(\"cNode: \" + closestNode.heuristic);\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByHeuristic(unvisitedNodes) {\n  //need to make this sortNodesByHeuristic\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.heuristic - nodeB.heuristic);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  const { col, row } = node;\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n    neighbor.heuristic =\n      Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}