{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid); //set the heuristic value of all nodes\n\n  for (node in grid) {\n    node.heuristic = ASDistance(node);\n  }\n\n  while (!!unvisitedNodes.length) {\n    //sortNodesByDistance(unvisitedNodes);\n    sortNodesByHeuristic(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); //this should choose the closest node to the end position based on manhattan distance\n    // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByHeuristic(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.heuristic - nodeB.heuristic);\n}\n\nfunction ASDistance(node) {\n  //heuristic = manhattan distance\n  const col = node.col,\n        row = node.row;\n  console.log(Math.sqrt(Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2)));\n  return Math.sqrt(Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2));\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance); //change distance to heuristic\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n    console.log(\"here \" + String(ASDistance(node)));\n    neighbor.heuristic = ASDistance(node);\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the AStar method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/algorithms/AStar.js"],"names":["AStar","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","node","heuristic","ASDistance","length","sortNodesByHeuristic","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","col","row","console","log","Math","sqrt","pow","abs","sortNodesByDistance","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","String","neighbors","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  //set the heuristic value of all nodes\n  for (node in grid) {\n    node.heuristic = ASDistance(node);\n  }\n  while (!!unvisitedNodes.length) {\n    //sortNodesByDistance(unvisitedNodes);\n    sortNodesByHeuristic(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); //this should choose the closest node to the end position based on manhattan distance\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByHeuristic(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.heuristic - nodeB.heuristic);\n}\n\nfunction ASDistance(node) {\n  //heuristic = manhattan distance\n  const { col, row } = node;\n  console.log(\n    Math.sqrt(Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2))\n  );\n  return Math.sqrt(\n    Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2)\n  );\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance); //change distance to heuristic\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n    console.log(\"here \" + String(ASDistance(node)));\n    neighbor.heuristic = ASDistance(node);\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the AStar method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}