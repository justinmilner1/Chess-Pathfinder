{"ast":null,"code":"import _objectSpread from \"/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/components/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node.jsx\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\nimport \"./PathfindingVisualizer.css\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 11;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 39;\nexport default class PathfindingVisualizer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      wallDensity: this.props.onWallDensity,\n      grid: [],\n      mouseIsPressed: false\n    };\n\n    this.createNode = (col, row) => {\n      return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n      };\n    };\n\n    this.getNewGridWithWallToggled = (grid, row, col) => {\n      const newGrid = grid.slice();\n      const node = newGrid[row][col];\n\n      const newNode = _objectSpread({}, node, {\n        isWall: !node.isWall\n      });\n\n      newGrid[row][col] = newNode;\n      return newGrid;\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    console.log(this.state.wallDensity);\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, this.props.onAlgoSpeed * i); //change 10 to algoSpeedVar\n\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, this.props.onAlgoSpeed * i); //change 10 to algoSpeedVar\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, this.props.onShortestPathSpeed * i); //change 50 to shortestPathVar\n    }\n  }\n\n  visualizeDijkstra() {\n    const grid = this.state.grid;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  getAlgorithm() {\n    return this.props.algorithm;\n  }\n\n  render() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          mouseIsPressed = _this$state.mouseIsPressed;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary btn-sm m-2\",\n      onClick: () => this.visualizeDijkstra(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Visualize \", this.props.onAlgo, \" with \", this.props.onPiece2), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const row = node.row,\n              col = node.col,\n              isFinish = node.isFinish,\n              isStart = node.isStart,\n              isWall = node.isWall;\n        return React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n  getInitialGrid() {\n    const grid = [];\n\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n} // const getInitialGrid = () => {\n//   const grid = [];\n//   for (let row = 0; row < 20; row++) {\n//     const currentRow = [];\n//     for (let col = 0; col < 50; col++) {\n//       currentRow.push(createNode(col, row));\n//     }\n//     grid.push(currentRow);\n//   }\n//   return grid;\n// };\n// const createNode = (col, row) => {\n//   return {\n//     col,\n//     row,\n//     isStart: row === START_NODE_ROW && col === START_NODE_COL,\n//     isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n//     distance: Infinity,\n//     isVisited: false,\n//     isWall: false,\n//     previousNode: null\n//   };\n// };\n// const getNewGridWithWallToggled = (grid, row, col) => {\n//   const newGrid = grid.slice();\n//   const node = newGrid[row][col];\n//   const newNode = {\n//     ...node,\n//     isWall: !node.isWall\n//   };\n//   newGrid[row][col] = newNode;\n//   return newGrid;\n// };","map":{"version":3,"sources":["/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/components/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","wallDensity","props","onWallDensity","grid","mouseIsPressed","createNode","col","row","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","getNewGridWithWallToggled","newGrid","slice","node","newNode","componentDidMount","getInitialGrid","setState","handleMouseDown","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","console","log","i","length","setTimeout","animateShortestPath","onAlgoSpeed","document","getElementById","className","onShortestPathSpeed","visualizeDijkstra","startNode","finishNode","getAlgorithm","algorithm","render","onAlgo","onPiece2","map","rowIdx","nodeIdx","currentRow","push"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./Node.jsx\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\n\nimport \"./PathfindingVisualizer.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 11;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 39;\n\nexport default class PathfindingVisualizer extends Component {\n  state = {\n    wallDensity: this.props.onWallDensity,\n    grid: [],\n    mouseIsPressed: false\n  };\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    console.log(this.state.wallDensity);\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, this.props.onAlgoSpeed * i); //change 10 to algoSpeedVar\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, this.props.onAlgoSpeed * i); //change 10 to algoSpeedVar\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, this.props.onShortestPathSpeed * i); //change 50 to shortestPathVar\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  getAlgorithm() {\n    return this.props.algorithm;\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <div>\n        <button\n          className=\"btn btn-primary btn-sm m-2\"\n          onClick={() => this.visualizeDijkstra()}\n        >\n          Visualize {this.props.onAlgo} with {this.props.onPiece2}\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n  getInitialGrid() {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }\n\n  createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null\n    };\n  };\n\n  getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n}\n\n// const getInitialGrid = () => {\n//   const grid = [];\n//   for (let row = 0; row < 20; row++) {\n//     const currentRow = [];\n//     for (let col = 0; col < 50; col++) {\n//       currentRow.push(createNode(col, row));\n//     }\n//     grid.push(currentRow);\n//   }\n//   return grid;\n// };\n\n// const createNode = (col, row) => {\n//   return {\n//     col,\n//     row,\n//     isStart: row === START_NODE_ROW && col === START_NODE_COL,\n//     isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n//     distance: Infinity,\n//     isVisited: false,\n//     isWall: false,\n//     previousNode: null\n//   };\n// };\n\n// const getNewGridWithWallToggled = (grid, row, col) => {\n//   const newGrid = grid.slice();\n//   const node = newGrid[row][col];\n//   const newNode = {\n//     ...node,\n//     isWall: !node.isWall\n//   };\n//   newGrid[row][col] = newNode;\n//   return newGrid;\n// };\n"]},"metadata":{},"sourceType":"module"}