{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode, piece) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    if (piece == \"rook\") updateUnvisitedNeighborsRook(closestNode, grid);\n    if (piece == \"bishop\") updateUnvisitedNeighborsBishop(closestNode, grid);\n    if (piece == \"queen\") updateUnvisitedNeighborsQueen(closestNode, grid);\n    if (piece == \"horse\") updateUnvisitedNeighborsHorse(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n} //rook\n\n\nfunction updateUnvisitedNeighborsRook(node, grid) {\n  //console.log({this.props.onPiece2});\n  const unvisitedNeighbors = getUnvisitedNeighborsRook(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n} //bishop\n\n\nfunction updateUnvisitedNeighborsBishop(node, grid) {\n  //console.log({this.props.onPiece2});\n  const unvisitedNeighbors = getUnvisitedNeighborsBishop(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n} //queen\n\n\nfunction updateUnvisitedNeighborsQueen(node, grid) {\n  //console.log({this.props.onPiece2});\n  const unvisitedNeighbors = getUnvisitedNeighborsQueen(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n} //horse\n\n\nfunction updateUnvisitedNeighborsHorse(node, grid) {\n  //console.log({this.props.onPiece2});\n  const unvisitedNeighbors = getUnvisitedNeighborsHorse(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvistedNeighborsBishop(node, grid) {\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row < grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row + 1][col + 1]);\n  if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row - 1][col + 1]);\n  if (col < grid[0].length - 1 && row < grid.length) neighbors.push(grid[row + 1][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsQueen(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row; //diagonals\n\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row < grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row + 1][col + 1]);\n  if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row - 1][col + 1]);\n  if (col < grid[0].length - 1 && row < grid.length) neighbors.push(grid[row + 1][col + 1]); //horizontal/verticals\n\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsHorse(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row; //upper left\n\n  if (row - 1 > 0 && col > 0) neighbors.push(grid[row - 2][col - 1]);\n  if (row > 0 && col - 1 > 0) neighbors.push(grid[row - 1][col - 2]); //upper right\n\n  if (row - 1 > 0 && col < grid[0].length) neighbors.push(grid[row - 2][col + 1]);\n  if (row > 0 && col + 1 < grid[0].length) neighbors.push(grid[row - 1][col + 2]); //lower left\n\n  if (col - 1 > 0 && row < grid.length - 1) neighbors.push(grid[row + 1][col - 2]);\n  if (col > 0 && row + 1 < grid.length - 1) neighbors.push(grid[row + 2][col - 1]); //lower right\n\n  if (row + 1 < grid.length && col < grid[0].length) neighbors.push(grid[row + 2][col + 1]);\n  if (row < grid.length && col + 1 < grid[0].length) neighbors.push(grid[row + 1][col + 2]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n} //rook\n\n\nfunction getUnvisitedNeighborsRook(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/algorithms/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","piece","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighborsRook","updateUnvisitedNeighborsBishop","updateUnvisitedNeighborsQueen","updateUnvisitedNeighborsHorse","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighborsRook","neighbor","previousNode","getUnvisitedNeighborsBishop","getUnvisitedNeighborsQueen","getUnvisitedNeighborsHorse","getUnvistedNeighborsBishop","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode, piece) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    if (piece == \"rook\") updateUnvisitedNeighborsRook(closestNode, grid);\n    if (piece == \"bishop\") updateUnvisitedNeighborsBishop(closestNode, grid);\n    if (piece == \"queen\") updateUnvisitedNeighborsQueen(closestNode, grid);\n    if (piece == \"horse\") updateUnvisitedNeighborsHorse(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n//rook\nfunction updateUnvisitedNeighborsRook(node, grid) {\n  //console.log({this.props.onPiece2});\n  const unvisitedNeighbors = getUnvisitedNeighborsRook(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\n//bishop\nfunction updateUnvisitedNeighborsBishop(node, grid) {\n  //console.log({this.props.onPiece2});\n  const unvisitedNeighbors = getUnvisitedNeighborsBishop(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\n//queen\nfunction updateUnvisitedNeighborsQueen(node, grid) {\n  //console.log({this.props.onPiece2});\n  const unvisitedNeighbors = getUnvisitedNeighborsQueen(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\n//horse\nfunction updateUnvisitedNeighborsHorse(node, grid) {\n  //console.log({this.props.onPiece2});\n  const unvisitedNeighbors = getUnvisitedNeighborsHorse(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvistedNeighborsBishop(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row < grid.length - 1 && col < grid[0].length - 1)\n    neighbors.push(grid[row + 1][col + 1]);\n  if (row > 0 && col < grid[0].length - 1)\n    neighbors.push(grid[row - 1][col + 1]);\n  if (col < grid[0].length - 1 && row < grid.length)\n    neighbors.push(grid[row + 1][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsQueen(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  //diagonals\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row < grid.length - 1 && col < grid[0].length - 1)\n    neighbors.push(grid[row + 1][col + 1]);\n  if (row > 0 && col < grid[0].length - 1)\n    neighbors.push(grid[row - 1][col + 1]);\n  if (col < grid[0].length - 1 && row < grid.length)\n    neighbors.push(grid[row + 1][col + 1]);\n  //horizontal/verticals\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsHorse(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  //upper left\n  if (row - 1 > 0 && col > 0) neighbors.push(grid[row - 2][col - 1]);\n  if (row > 0 && col - 1 > 0) neighbors.push(grid[row - 1][col - 2]);\n  //upper right\n  if (row - 1 > 0 && col < grid[0].length)\n    neighbors.push(grid[row - 2][col + 1]);\n  if (row > 0 && col + 1 < grid[0].length)\n    neighbors.push(grid[row - 1][col + 2]);\n  //lower left\n  if (col - 1 > 0 && row < grid.length - 1)\n    neighbors.push(grid[row + 1][col - 2]);\n  if (col > 0 && row + 1 < grid.length - 1)\n    neighbors.push(grid[row + 2][col - 1]);\n  //lower right\n  if (row + 1 < grid.length && col < grid[0].length)\n    neighbors.push(grid[row + 2][col + 1]);\n  if (row < grid.length && col + 1 < grid[0].length)\n    neighbors.push(grid[row + 1][col + 2]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\n//rook\nfunction getUnvisitedNeighborsRook(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}