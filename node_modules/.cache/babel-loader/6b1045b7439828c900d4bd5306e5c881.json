{"ast":null,"code":"import _objectSpread from \"/Users/justinmilner/mosh-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/justinmilner/mosh-app/src/components/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node.jsx\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\nimport \"./PathfindingVisualizer.css\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 11;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 39;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      speedVar: this.props.onSpeed\n    };\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i); //change 10 to algoSpeedVar\n\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, 10 * i); //change 10 to algoSpeedVar\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, 20 * i); //change 50 to shortestPathVar\n    }\n  }\n\n  visualizeDijkstra() {\n    const grid = this.state.grid;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  getAlgorithm() {\n    return this.props.algorithm;\n  }\n\n  render() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          mouseIsPressed = _this$state.mouseIsPressed;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary btn-sm m-2\",\n      onClick: () => this.visualizeDijkstra(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Visualize \", this.props.onAlgo, \" with \", this.props.onPiece2), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const row = node.row,\n              col = node.col,\n              isFinish = node.isFinish,\n              isStart = node.isStart,\n              isWall = node.isWall;\n        return React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n\n  const newNode = _objectSpread({}, node, {\n    isWall: !node.isWall\n  });\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/justinmilner/mosh-app/src/components/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","speedVar","props","onSpeed","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","getAlgorithm","algorithm","render","onAlgo","onPiece2","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./Node.jsx\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\n\nimport \"./PathfindingVisualizer.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 11;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 39;\n\nexport default class PathfindingVisualizer extends Component {\n  state = {\n    speedVar: this.props.onSpeed\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i); //change 10 to algoSpeedVar\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i); //change 10 to algoSpeedVar\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 20 * i); //change 50 to shortestPathVar\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  getAlgorithm() {\n    return this.props.algorithm;\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <div>\n        <button\n          className=\"btn btn-primary btn-sm m-2\"\n          onClick={() => this.visualizeDijkstra()}\n        >\n          Visualize {this.props.onAlgo} with {this.props.onPiece2}\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}