{"ast":null,"code":"// Performs A* algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar2(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const col = startNode.col,\n        row = startNode.row;\n  startNode.distance = 0 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes); //i think heuristic value for each node needs to be set (showing up as undefined currently)\n\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  //need to make this sortNodesByHeuristic\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction getUnvistedNeighborsBishop(node, grid) {\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row < grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row + 1][col + 1]);\n  if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row - 1][col + 1]);\n  if (col < grid[0].length - 1 && row < grid.length) neighbors.push(grid[row + 1][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsQueen(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row; //diagonals\n\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row < grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row + 1][col + 1]);\n  if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row - 1][col + 1]);\n  if (col < grid[0].length - 1 && row < grid.length) neighbors.push(grid[row + 1][col + 1]); //horizontal/verticals\n\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsHorse(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row; //upper left\n\n  if (row - 1 > 0 && col > 0) neighbors.push(grid[row - 2][col - 1]);\n  if (row > 0 && col - 1 > 0) neighbors.push(grid[row - 1][col - 2]); //upper right\n\n  if (row - 1 > 0 && col < grid[0].length) neighbors.push(grid[row - 2][col + 1]);\n  if (row > 0 && col + 1 < grid[0].length) neighbors.push(grid[row - 1][col + 2]); //lower left\n\n  if (col - 1 > 0 && row < grid.length - 1) neighbors.push(grid[row + 1][col - 2]);\n  if (col > 0 && row + 1 < grid.length - 1) neighbors.push(grid[row + 2][col - 1]); //lower right\n\n  if (row + 1 < grid.length && col < grid[0].length) neighbors.push(grid[row + 2][col + 1]);\n  if (row < grid.length && col + 1 < grid[0].length) neightbors.push(grid[row + 1][col + 2]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n} //rook\n\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  const col = node.col,\n        row = node.row;\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/algorithms/AStar2.js"],"names":["AStar2","grid","startNode","finishNode","visitedNodesInOrder","col","row","distance","Math","pow","abs","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","getUnvistedNeighborsBishop","node","neighbors","filter","neighbor","getUnvisitedNeighborsQueen","getUnvisitedNeighborsHorse","neightbors","getUnvisitedNeighbors","unvisitedNeighbors","previousNode","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["// Performs A* algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar2(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const { col, row } = startNode;\n  startNode.distance =\n    0 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes); //i think heuristic value for each node needs to be set (showing up as undefined currently)\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  //need to make this sortNodesByHeuristic\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction getUnvistedNeighborsBishop(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row < grid.length - 1 && col < grid[0].length - 1)\n    neighbors.push(grid[row + 1][col + 1]);\n  if (row > 0 && col < grid[0].length - 1)\n    neighbors.push(grid[row - 1][col + 1]);\n  if (col < grid[0].length - 1 && row < grid.length)\n    neighbors.push(grid[row + 1][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsQueen(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  //diagonals\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row < grid.length - 1 && col < grid[0].length - 1)\n    neighbors.push(grid[row + 1][col + 1]);\n  if (row > 0 && col < grid[0].length - 1)\n    neighbors.push(grid[row - 1][col + 1]);\n  if (col < grid[0].length - 1 && row < grid.length)\n    neighbors.push(grid[row + 1][col + 1]);\n  //horizontal/verticals\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsHorse(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  //upper left\n  if (row - 1 > 0 && col > 0) neighbors.push(grid[row - 2][col - 1]);\n  if (row > 0 && col - 1 > 0) neighbors.push(grid[row - 1][col - 2]);\n  //upper right\n  if (row - 1 > 0 && col < grid[0].length)\n    neighbors.push(grid[row - 2][col + 1]);\n  if (row > 0 && col + 1 < grid[0].length)\n    neighbors.push(grid[row - 1][col + 2]);\n  //lower left\n  if (col - 1 > 0 && row < grid.length - 1)\n    neighbors.push(grid[row + 1][col - 2]);\n  if (col > 0 && row + 1 < grid.length - 1)\n    neighbors.push(grid[row + 2][col - 1]);\n  //lower right\n  if (row + 1 < grid.length && col < grid[0].length)\n    neighbors.push(grid[row + 2][col + 1]);\n  if (row < grid.length && col + 1 < grid[0].length)\n    neightbors.push(grid[row + 1][col + 2]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\n//rook\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  const { col, row } = node;\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance =\n      node.distance +\n      1 +\n      Math.pow(Math.abs(39 - col), 2) +\n      Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}