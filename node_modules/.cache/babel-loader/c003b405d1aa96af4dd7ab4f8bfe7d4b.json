{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid); //set the heuristic value of all nodes\n\n  for (let i = 0; i < unvisitedNodes.length; i++) {\n    unvisitedNodes[i].heuristic = ASDistance(unvisitedNodes[i]);\n  }\n\n  while (!!unvisitedNodes.length) {\n    // for (let i = 0; i < unvisitedNodes.length; i++) {\n    //   console.log(unvisitedNodes[i]);\n    // }\n    sortNodesByDistance(unvisitedNodes); //maybe i should choose the node equal to the lowest distance with the lowest heuristic\n    //sortNodesByHeuristic(unvisitedNodes);\n\n    let originalDistance = unvisitedNodes[0].distance;\n    let index = 0; // while (unvisitedNodes[index].distance == originalDistance) {\n    //   if (unvisitedNodes[index].heuristic < unvisitedNodes[0].heuristic) {\n    //     let temp = unvisitedNodes[0];\n    //     unvisitedNodes[0] = unvisitedNodes[index];\n    //     unvisitedNodes[index] = temp;\n    //   }\n    // }\n\n    const closestNode = unvisitedNodes.shift(); //this should choose the closest node to the end position based on manhattan distance\n\n    console.log(closestNode.distance, closestNode.heuristic); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) {\n      console.log(\"returned from isWall\");\n      continue;\n    } // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n\n    if (closestNode.distance === Infinity) {\n      console.log(\"returned from in trap\");\n      return visitedNodesInOrder;\n    }\n\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n\n    if (closestNode === finishNode) {\n      console.log(\"exited naturally\");\n      return visitedNodesInOrder;\n    }\n\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByHeuristic(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.heuristic - nodeB.heuristic);\n}\n\nfunction ASDistance(node) {\n  //heuristic = manhattan distance\n  const col = node.col,\n        row = node.row;\n  return Math.sqrt(Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2));\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited); // i think this should return just one node(the lowester heuristic)\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the AStar method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/algorithms/AStar.js"],"names":["AStar","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","i","length","heuristic","ASDistance","sortNodesByDistance","originalDistance","index","closestNode","shift","console","log","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sortNodesByHeuristic","sort","nodeA","nodeB","node","col","row","Math","sqrt","pow","abs","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  //set the heuristic value of all nodes\n  for (let i = 0; i < unvisitedNodes.length; i++) {\n    unvisitedNodes[i].heuristic = ASDistance(unvisitedNodes[i]);\n  }\n  while (!!unvisitedNodes.length) {\n    // for (let i = 0; i < unvisitedNodes.length; i++) {\n    //   console.log(unvisitedNodes[i]);\n    // }\n    sortNodesByDistance(unvisitedNodes); //maybe i should choose the node equal to the lowest distance with the lowest heuristic\n    //sortNodesByHeuristic(unvisitedNodes);\n    let originalDistance = unvisitedNodes[0].distance;\n    let index = 0;\n    // while (unvisitedNodes[index].distance == originalDistance) {\n    //   if (unvisitedNodes[index].heuristic < unvisitedNodes[0].heuristic) {\n    //     let temp = unvisitedNodes[0];\n    //     unvisitedNodes[0] = unvisitedNodes[index];\n    //     unvisitedNodes[index] = temp;\n    //   }\n    // }\n\n    const closestNode = unvisitedNodes.shift(); //this should choose the closest node to the end position based on manhattan distance\n    console.log(closestNode.distance, closestNode.heuristic);\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) {\n      console.log(\"returned from isWall\");\n      continue;\n    }\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) {\n      console.log(\"returned from in trap\");\n      return visitedNodesInOrder;\n    }\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) {\n      console.log(\"exited naturally\");\n      return visitedNodesInOrder;\n    }\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByHeuristic(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.heuristic - nodeB.heuristic);\n}\n\nfunction ASDistance(node) {\n  //heuristic = manhattan distance\n  const { col, row } = node;\n  return Math.sqrt(\n    Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2)\n  );\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited); // i think this should return just one node(the lowester heuristic)\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the AStar method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}