{"ast":null,"code":"import _objectSpread from \"/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/App.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\nimport \"./App.css\";\nimport { dijkstra } from \"./algorithms/dijkstra\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counters: [{\n        id: 1,\n        value: 0\n      }, {\n        id: 2,\n        value: 0\n      }],\n      wallDensity: 0,\n      algoSpeed: 10,\n      shortestPathSpeed: 20,\n      algorithm: \"Dijkstra\",\n      piece: \"Rook\"\n    };\n\n    this.selectAlgorithm = algo => {\n      this.state.algorithm = algo;\n      this.setState({\n        algo\n      });\n      console.log(this.state.algorithm);\n    };\n\n    this.selectPiece = p => {\n      this.state.piece = p;\n      this.setState({\n        p\n      });\n      console.log(this.state.piece);\n    };\n\n    this.handleIncrement = counter => {\n      //updating counters\n      const counters = [...this.state.counters];\n      const index = counters.indexOf(counter);\n      if (counters[index].value == 4) return;\n      counters[index] = _objectSpread({}, counter);\n      counters[index].value++;\n      console.log(this.state.counters[0]);\n      this.setState({\n        counters\n      }); //updating speed\n\n      if (counter.id == 2) {\n        const newSpeed = this.state.algoSpeed -= 1;\n        this.state.algoSpeed -= 1;\n        this.state.shortestPathSpeed -= 2;\n        this.setState({\n          newSpeed\n        });\n      } //or updating density\n\n\n      if (counter.id == 1) {\n        constNewDensity = this.state.wallDensity += 1;\n        if (this.state.wallDensity == 0) return;\n        this.state.wallDensity += 1;\n      }\n    };\n\n    this.handleDecrement = counter => {\n      //updating counters\n      const counters = [...this.state.counters];\n      const index = counters.indexOf(counter);\n      if (counters[index].value == 0) return;\n      counters[index] = _objectSpread({}, counter);\n      counters[index].value--;\n      console.log(this.state.counters[0]);\n      this.setState({\n        counters\n      }); //updating speed\n\n      if (counter.id == 2) {\n        const newSpeed = this.state.algoSpeed += 1;\n        this.state.algoSpeed += 1;\n        this.state.shortestPathSpeed += 2;\n        this.setState({\n          newSpeed\n        });\n      } //or updating density\n\n\n      if (counter.id == 1) {\n        if (this.state.wallDensity == 0) return;\n        this.state.wallDensity -= 1;\n      }\n    };\n\n    this.handleReset = () => {\n      const counters = this.state.counters.map(c => {\n        c.value = 0;\n        return c;\n      });\n      this.setState({\n        counters\n      });\n    };\n\n    this.handleDelete = counterId => {\n      const counters = this.state.counters.filter(c => c.id !== counterId);\n      this.setState({\n        counters\n      });\n    };\n\n    this.getSpeed = () => {\n      return this.state.counters[0].value;\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      onAlgorithm: this.selectAlgorithm,\n      totalCounters: this.state.counters.filter(c => c.value > 0).length,\n      onPiece: this.selectPiece,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Counters, {\n      counters: this.state.counters,\n      onReset: this.handleReset,\n      onIncrement: this.handleIncrement,\n      onDecrement: this.handleDecrement,\n      onDelete: this.handleDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(PathfindingVisualizer, {\n      onWallDensity: this.state.wallDensity,\n      onAlgoSpeed: this.state.algoSpeed,\n      onShortestPathSpeed: this.state.shortestPathSpeed,\n      onAlgo: this.state.algorithm,\n      onPiece2: this.state.piece,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/App.js"],"names":["React","Component","NavBar","Counters","PathfindingVisualizer","dijkstra","App","state","counters","id","value","wallDensity","algoSpeed","shortestPathSpeed","algorithm","piece","selectAlgorithm","algo","setState","console","log","selectPiece","p","handleIncrement","counter","index","indexOf","newSpeed","constNewDensity","handleDecrement","handleReset","map","c","handleDelete","counterId","filter","getSpeed","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\nimport \"./App.css\";\nimport { dijkstra } from \"./algorithms/dijkstra\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 }\n    ],\n    wallDensity: 0,\n    algoSpeed: 10,\n    shortestPathSpeed: 20,\n    algorithm: \"Dijkstra\",\n    piece: \"Rook\"\n  };\n\n  selectAlgorithm = algo => {\n    this.state.algorithm = algo;\n    this.setState({ algo });\n    console.log(this.state.algorithm);\n  };\n\n  selectPiece = p => {\n    this.state.piece = p;\n    this.setState({ p });\n    console.log(this.state.piece);\n  };\n\n  handleIncrement = counter => {\n    //updating counters\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    if (counters[index].value == 4) return;\n    counters[index] = { ...counter };\n    counters[index].value++;\n    console.log(this.state.counters[0]);\n    this.setState({ counters });\n\n    //updating speed\n    if (counter.id == 2) {\n      const newSpeed = (this.state.algoSpeed -= 1);\n      this.state.algoSpeed -= 1;\n      this.state.shortestPathSpeed -= 2;\n      this.setState({ newSpeed });\n    }\n    //or updating density\n    if (counter.id == 1) {\n      constNewDensity = this.state.wallDensity += 1;\n      if (this.state.wallDensity == 0) return;\n      this.state.wallDensity += 1;\n    }\n  };\n\n  handleDecrement = counter => {\n    //updating counters\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    if (counters[index].value == 0) return;\n    counters[index] = { ...counter };\n    counters[index].value--;\n    console.log(this.state.counters[0]);\n    this.setState({ counters });\n\n    //updating speed\n    if (counter.id == 2) {\n      const newSpeed = (this.state.algoSpeed += 1);\n      this.state.algoSpeed += 1;\n      this.state.shortestPathSpeed += 2;\n      this.setState({ newSpeed });\n    }\n    //or updating density\n    if (counter.id == 1) {\n      if (this.state.wallDensity == 0) return;\n      this.state.wallDensity -= 1;\n    }\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  getSpeed = () => {\n    return this.state.counters[0].value;\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          onAlgorithm={this.selectAlgorithm}\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n          onPiece={this.selectPiece}\n        />\n        <div id=\"body\">\n          <main className=\"container\">\n            <Counters\n              counters={this.state.counters}\n              onReset={this.handleReset}\n              onIncrement={this.handleIncrement}\n              onDecrement={this.handleDecrement}\n              onDelete={this.handleDelete}\n            />\n          </main>\n          <PathfindingVisualizer\n            onWallDensity={this.state.wallDensity}\n            onAlgoSpeed={this.state.algoSpeed}\n            onShortestPathSpeed={this.state.shortestPathSpeed}\n            onAlgo={this.state.algorithm}\n            onPiece2={this.state.piece}\n          ></PathfindingVisualizer>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}