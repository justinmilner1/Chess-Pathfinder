{"ast":null,"code":"import _objectSpread from \"/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/components/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node.jsx\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\nimport \"./PathfindingVisualizer.css\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 11;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 39;\nexport default class PathfindingVisualizer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      wallDensity: this.props.onWallDensity,\n      grid: [],\n      mouseIsPressed: false\n    };\n\n    this.getNewGridWithWallToggled = (grid, row, col) => {\n      const newGrid = grid.slice();\n      const node = newGrid[row][col];\n\n      const newNode = _objectSpread({}, node, {\n        isWall: !node.isWall\n      });\n\n      newGrid[row][col] = newNode;\n      return newGrid;\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    console.log(this.state.wallDensity);\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, this.props.onAlgoSpeed * i); //change 10 to algoSpeedVar\n\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, this.props.onAlgoSpeed * i); //change 10 to algoSpeedVar\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, this.props.onShortestPathSpeed * i); //change 50 to shortestPathVar\n    }\n  }\n\n  visualizeDijkstra() {\n    const grid = this.state.grid;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  getAlgorithm() {\n    return this.props.algorithm;\n  }\n\n  render() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          mouseIsPressed = _this$state.mouseIsPressed;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary btn-sm m-2\",\n      onClick: () => this.visualizeDijkstra(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Visualize \", this.props.onAlgo, \" with \", this.props.onPiece2), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const row = node.row,\n              col = node.col,\n              isFinish = node.isFinish,\n              isStart = node.isStart,\n              isWall = node.isWall;\n        return React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n  getInitialGrid() {\n    const grid = [];\n\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  createNode(col, row) {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null\n    };\n  }\n\n} // const getInitialGrid = () => {\n//   const grid = [];\n//   for (let row = 0; row < 20; row++) {\n//     const currentRow = [];\n//     for (let col = 0; col < 50; col++) {\n//       currentRow.push(createNode(col, row));\n//     }\n//     grid.push(currentRow);\n//   }\n//   return grid;\n// };\n// const createNode = (col, row) => {\n//   return {\n//     col,\n//     row,\n//     isStart: row === START_NODE_ROW && col === START_NODE_COL,\n//     isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n//     distance: Infinity,\n//     isVisited: false,\n//     isWall: false,\n//     previousNode: null\n//   };\n// };\n// const getNewGridWithWallToggled = (grid, row, col) => {\n//   const newGrid = grid.slice();\n//   const node = newGrid[row][col];\n//   const newNode = {\n//     ...node,\n//     isWall: !node.isWall\n//   };\n//   newGrid[row][col] = newNode;\n//   return newGrid;\n// };","map":{"version":3,"sources":["/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/components/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","wallDensity","props","onWallDensity","grid","mouseIsPressed","getNewGridWithWallToggled","row","col","newGrid","slice","node","newNode","isWall","componentDidMount","getInitialGrid","setState","handleMouseDown","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","console","log","i","length","setTimeout","animateShortestPath","onAlgoSpeed","document","getElementById","className","onShortestPathSpeed","visualizeDijkstra","startNode","finishNode","getAlgorithm","algorithm","render","onAlgo","onPiece2","map","rowIdx","nodeIdx","isFinish","isStart","currentRow","push","createNode","distance","Infinity","isVisited","previousNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./Node.jsx\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\n\nimport \"./PathfindingVisualizer.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 11;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 39;\n\nexport default class PathfindingVisualizer extends Component {\n  state = {\n    wallDensity: this.props.onWallDensity,\n    grid: [],\n    mouseIsPressed: false\n  };\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    console.log(this.state.wallDensity);\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, this.props.onAlgoSpeed * i); //change 10 to algoSpeedVar\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, this.props.onAlgoSpeed * i); //change 10 to algoSpeedVar\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, this.props.onShortestPathSpeed * i); //change 50 to shortestPathVar\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  getAlgorithm() {\n    return this.props.algorithm;\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <div>\n        <button\n          className=\"btn btn-primary btn-sm m-2\"\n          onClick={() => this.visualizeDijkstra()}\n        >\n          Visualize {this.props.onAlgo} with {this.props.onPiece2}\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n  getInitialGrid() {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }\n\n  createNode(col, row) {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null\n    };\n  }\n\n  getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n}\n\n// const getInitialGrid = () => {\n//   const grid = [];\n//   for (let row = 0; row < 20; row++) {\n//     const currentRow = [];\n//     for (let col = 0; col < 50; col++) {\n//       currentRow.push(createNode(col, row));\n//     }\n//     grid.push(currentRow);\n//   }\n//   return grid;\n// };\n\n// const createNode = (col, row) => {\n//   return {\n//     col,\n//     row,\n//     isStart: row === START_NODE_ROW && col === START_NODE_COL,\n//     isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n//     distance: Infinity,\n//     isVisited: false,\n//     isWall: false,\n//     previousNode: null\n//   };\n// };\n\n// const getNewGridWithWallToggled = (grid, row, col) => {\n//   const newGrid = grid.slice();\n//   const node = newGrid[row][col];\n//   const newNode = {\n//     ...node,\n//     isWall: !node.isWall\n//   };\n//   newGrid[row][col] = newNode;\n//   return newGrid;\n// };\n"]},"metadata":{},"sourceType":"module"}