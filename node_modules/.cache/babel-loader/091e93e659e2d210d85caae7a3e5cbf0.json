{"ast":null,"code":"// Performs A* algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar2(grid, startNode, finishNode, piece) {\n  const visitedNodesInOrder = [];\n  const col = startNode.col,\n        row = startNode.row;\n  startNode.distance = 0 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes); //i think heuristic value for each node needs to be set (showing up as undefined currently)\n\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    if (piece == \"Rook\") updateUnvisitedNeighborsRook(closestNode, grid);\n    if (piece == \"Bishop\") updateUnvisitedNeighborsBishop(closestNode, grid);\n    if (piece == \"Queen\") updateUnvisitedNeighborsQueen(closestNode, grid);\n    if (piece == \"Horse\") updateUnvisitedNeighborsHorse(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  //need to make this sortNodesByHeuristic\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction getUnvisitedNeighborsBishop(node, grid) {\n  const neighbors = [];\n  const col = node.col,\n        row = node.row; //top left\n\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]); //bottom right\n\n  if (row < grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row + 1][col + 1]); //top right\n\n  if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row - 1][col + 1]); //bottom left\n\n  if (col > 0 && row < grid.length - 1) neighbors.push(grid[row + 1][col - 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsQueen(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row; //diagonals\n\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row < grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row + 1][col + 1]);\n  if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row - 1][col + 1]);\n  if (col < grid[0].length - 1 && row < grid.length - 1) neighbors.push(grid[row + 1][col + 1]); //horizontal/verticals\n\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsHorse(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row; //upper left\n\n  if (row - 1 > 0 && col > 0) neighbors.push(grid[row - 2][col - 1]);\n  if (row > 0 && col - 1 > 0) neighbors.push(grid[row - 1][col - 2]); //upper right\n\n  if (row - 1 > 0 && col < grid[0].length) neighbors.push(grid[row - 2][col + 1]);\n  if (row > 0 && col + 1 < grid[0].length) neighbors.push(grid[row - 1][col + 2]); //lower left\n\n  if (col - 1 > 0 && row < grid.length - 1) neighbors.push(grid[row + 1][col - 2]);\n  if (col > 0 && row + 1 < grid.length - 1) neighbors.push(grid[row + 2][col - 1]); //lower right\n\n  if (row + 1 < grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row + 2][col + 1]);\n  if (row < grid.length - 1 && col + 1 < grid[0].length - 1) neighbors.push(grid[row + 1][col + 2]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n} //rook\n\n\nfunction getUnvisitedNeighborsRook(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction updateUnvisitedNeighborsRook(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighborsRook(node, grid);\n  const col = node.col,\n        row = node.row;\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction updateUnvisitedNeighborsBishop(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighborsBishop(node, grid);\n  const col = node.col,\n        row = node.row;\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction updateUnvisitedNeighborsQueen(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighborsQueen(node, grid);\n  const col = node.col,\n        row = node.row;\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction updateUnvisitedNeighborsHorse(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighborsHorse(node, grid);\n  const col = node.col,\n        row = node.row;\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/algorithms/AStar2.js"],"names":["AStar2","grid","startNode","finishNode","piece","visitedNodesInOrder","col","row","distance","Math","pow","abs","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighborsRook","updateUnvisitedNeighborsBishop","updateUnvisitedNeighborsQueen","updateUnvisitedNeighborsHorse","sort","nodeA","nodeB","getUnvisitedNeighborsBishop","node","neighbors","filter","neighbor","getUnvisitedNeighborsQueen","getUnvisitedNeighborsHorse","getUnvisitedNeighborsRook","unvisitedNeighbors","previousNode","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,UAAjC,EAA6CC,KAA7C,EAAoD;AACzD,QAAMC,mBAAmB,GAAG,EAA5B;AADyD,QAEjDC,GAFiD,GAEpCJ,SAFoC,CAEjDI,GAFiD;AAAA,QAE5CC,GAF4C,GAEpCL,SAFoC,CAE5CK,GAF4C;AAGzDL,EAAAA,SAAS,CAACM,QAAV,GACE,IAAIC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKL,GAAd,CAAT,EAA6B,CAA7B,CAAJ,GAAsCG,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKJ,GAAd,CAAT,EAA6B,CAA7B,CADxC;AAGA,QAAMK,cAAc,GAAGC,WAAW,CAACZ,IAAD,CAAlC;;AACA,SAAO,CAAC,CAACW,cAAc,CAACE,MAAxB,EAAgC;AAC9BC,IAAAA,mBAAmB,CAACH,cAAD,CAAnB,CAD8B,CACO;;AACrC,UAAMI,WAAW,GAAGJ,cAAc,CAACK,KAAf,EAApB,CAF8B,CAG9B;;AACA,QAAID,WAAW,CAACE,MAAhB,EAAwB,SAJM,CAK9B;AACA;;AACA,QAAIF,WAAW,CAACR,QAAZ,KAAyBW,QAA7B,EAAuC,OAAOd,mBAAP;AACvCW,IAAAA,WAAW,CAACI,SAAZ,GAAwB,IAAxB;AACAf,IAAAA,mBAAmB,CAACgB,IAApB,CAAyBL,WAAzB;AACA,QAAIA,WAAW,KAAKb,UAApB,EAAgC,OAAOE,mBAAP;AAChC,QAAID,KAAK,IAAI,MAAb,EAAqBkB,4BAA4B,CAACN,WAAD,EAAcf,IAAd,CAA5B;AACrB,QAAIG,KAAK,IAAI,QAAb,EAAuBmB,8BAA8B,CAACP,WAAD,EAAcf,IAAd,CAA9B;AACvB,QAAIG,KAAK,IAAI,OAAb,EAAsBoB,6BAA6B,CAACR,WAAD,EAAcf,IAAd,CAA7B;AACtB,QAAIG,KAAK,IAAI,OAAb,EAAsBqB,6BAA6B,CAACT,WAAD,EAAcf,IAAd,CAA7B;AACvB;AACF;;AAED,SAASc,mBAAT,CAA6BH,cAA7B,EAA6C;AAC3C;AACAA,EAAAA,cAAc,CAACc,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACnB,QAAN,GAAiBoB,KAAK,CAACpB,QAA7D;AACD;;AAED,SAASqB,2BAAT,CAAqCC,IAArC,EAA2C7B,IAA3C,EAAiD;AAC/C,QAAM8B,SAAS,GAAG,EAAlB;AAD+C,QAEvCzB,GAFuC,GAE1BwB,IAF0B,CAEvCxB,GAFuC;AAAA,QAElCC,GAFkC,GAE1BuB,IAF0B,CAElCvB,GAFkC,EAG/C;;AACA,MAAIA,GAAG,GAAG,CAAN,IAAWD,GAAG,GAAG,CAArB,EAAwByB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf,EAJuB,CAK/C;;AACA,MAAIC,GAAG,GAAGN,IAAI,CAACa,MAAL,GAAc,CAApB,IAAyBR,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAR,GAAiB,CAApD,EACEiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf,EAP6C,CAQ/C;;AACA,MAAIC,GAAG,GAAG,CAAN,IAAWD,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAR,GAAiB,CAAtC,EACEiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf,EAV6C,CAW/C;;AACA,MAAIA,GAAG,GAAG,CAAN,IAAWC,GAAG,GAAGN,IAAI,CAACa,MAAL,GAAc,CAAnC,EAAsCiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf;AACtC,SAAOyB,SAAS,CAACC,MAAV,CAAiBC,QAAQ,IAAI,CAACA,QAAQ,CAACb,SAAvC,CAAP;AACD;;AAED,SAASc,0BAAT,CAAoCJ,IAApC,EAA0C7B,IAA1C,EAAgD;AAC9C;AACA,QAAM8B,SAAS,GAAG,EAAlB;AAF8C,QAGtCzB,GAHsC,GAGzBwB,IAHyB,CAGtCxB,GAHsC;AAAA,QAGjCC,GAHiC,GAGzBuB,IAHyB,CAGjCvB,GAHiC,EAI9C;;AACA,MAAIA,GAAG,GAAG,CAAN,IAAWD,GAAG,GAAG,CAArB,EAAwByB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf;AACxB,MAAIC,GAAG,GAAGN,IAAI,CAACa,MAAL,GAAc,CAApB,IAAyBR,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAR,GAAiB,CAApD,EACEiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf;AACF,MAAIC,GAAG,GAAG,CAAN,IAAWD,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAR,GAAiB,CAAtC,EACEiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf;AACF,MAAIA,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAR,GAAiB,CAAvB,IAA4BP,GAAG,GAAGN,IAAI,CAACa,MAAL,GAAc,CAApD,EACEiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf,EAX4C,CAY9C;;AACA,MAAIC,GAAG,GAAG,CAAV,EAAawB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAGN,IAAI,CAACa,MAAL,GAAc,CAAxB,EAA2BiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAayB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAR,GAAiB,CAA3B,EAA8BiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOyB,SAAS,CAACC,MAAV,CAAiBC,QAAQ,IAAI,CAACA,QAAQ,CAACb,SAAvC,CAAP;AACD;;AAED,SAASe,0BAAT,CAAoCL,IAApC,EAA0C7B,IAA1C,EAAgD;AAC9C;AACA,QAAM8B,SAAS,GAAG,EAAlB;AAF8C,QAGtCzB,GAHsC,GAGzBwB,IAHyB,CAGtCxB,GAHsC;AAAA,QAGjCC,GAHiC,GAGzBuB,IAHyB,CAGjCvB,GAHiC,EAI9C;;AACA,MAAIA,GAAG,GAAG,CAAN,GAAU,CAAV,IAAeD,GAAG,GAAG,CAAzB,EAA4ByB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf;AAC5B,MAAIC,GAAG,GAAG,CAAN,IAAWD,GAAG,GAAG,CAAN,GAAU,CAAzB,EAA4ByB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf,EANkB,CAO9C;;AACA,MAAIC,GAAG,GAAG,CAAN,GAAU,CAAV,IAAeD,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAjC,EACEiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf;AACF,MAAIC,GAAG,GAAG,CAAN,IAAWD,GAAG,GAAG,CAAN,GAAUL,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAjC,EACEiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf,EAX4C,CAY9C;;AACA,MAAIA,GAAG,GAAG,CAAN,GAAU,CAAV,IAAeC,GAAG,GAAGN,IAAI,CAACa,MAAL,GAAc,CAAvC,EACEiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf;AACF,MAAIA,GAAG,GAAG,CAAN,IAAWC,GAAG,GAAG,CAAN,GAAUN,IAAI,CAACa,MAAL,GAAc,CAAvC,EACEiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf,EAhB4C,CAiB9C;;AACA,MAAIC,GAAG,GAAG,CAAN,GAAUN,IAAI,CAACa,MAAL,GAAc,CAAxB,IAA6BR,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAR,GAAiB,CAAxD,EACEiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf;AACF,MAAIC,GAAG,GAAGN,IAAI,CAACa,MAAL,GAAc,CAApB,IAAyBR,GAAG,GAAG,CAAN,GAAUL,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAR,GAAiB,CAAxD,EACEiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAG,GAAG,CAApB,CAAf;AAEF,SAAOyB,SAAS,CAACC,MAAV,CAAiBC,QAAQ,IAAI,CAACA,QAAQ,CAACb,SAAvC,CAAP;AACD,C,CAED;;;AACA,SAASgB,yBAAT,CAAmCN,IAAnC,EAAyC7B,IAAzC,EAA+C;AAC7C;AACA,QAAM8B,SAAS,GAAG,EAAlB;AAF6C,QAGrCzB,GAHqC,GAGxBwB,IAHwB,CAGrCxB,GAHqC;AAAA,QAGhCC,GAHgC,GAGxBuB,IAHwB,CAGhCvB,GAHgC;AAI7C,MAAIA,GAAG,GAAG,CAAV,EAAawB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAGN,IAAI,CAACa,MAAL,GAAc,CAAxB,EAA2BiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAayB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAR,GAAiB,CAA3B,EAA8BiB,SAAS,CAACV,IAAV,CAAepB,IAAI,CAACM,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOyB,SAAS,CAACC,MAAV,CAAiBC,QAAQ,IAAI,CAACA,QAAQ,CAACb,SAAvC,CAAP;AACD;;AAED,SAASE,4BAAT,CAAsCQ,IAAtC,EAA4C7B,IAA5C,EAAkD;AAChD,QAAMoC,kBAAkB,GAAGD,yBAAyB,CAACN,IAAD,EAAO7B,IAAP,CAApD;AADgD,QAExCK,GAFwC,GAE3BwB,IAF2B,CAExCxB,GAFwC;AAAA,QAEnCC,GAFmC,GAE3BuB,IAF2B,CAEnCvB,GAFmC;;AAGhD,OAAK,MAAM0B,QAAX,IAAuBI,kBAAvB,EAA2C;AACzCJ,IAAAA,QAAQ,CAACzB,QAAT,GACEsB,IAAI,CAACtB,QAAL,GACA,CADA,GAEAC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKL,GAAd,CAAT,EAA6B,CAA7B,CAFA,GAGAG,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKJ,GAAd,CAAT,EAA6B,CAA7B,CAJF;AAKA0B,IAAAA,QAAQ,CAACK,YAAT,GAAwBR,IAAxB;AACD;AACF;;AAED,SAASP,8BAAT,CAAwCO,IAAxC,EAA8C7B,IAA9C,EAAoD;AAClD,QAAMoC,kBAAkB,GAAGR,2BAA2B,CAACC,IAAD,EAAO7B,IAAP,CAAtD;AADkD,QAE1CK,GAF0C,GAE7BwB,IAF6B,CAE1CxB,GAF0C;AAAA,QAErCC,GAFqC,GAE7BuB,IAF6B,CAErCvB,GAFqC;;AAGlD,OAAK,MAAM0B,QAAX,IAAuBI,kBAAvB,EAA2C;AACzCJ,IAAAA,QAAQ,CAACzB,QAAT,GACEsB,IAAI,CAACtB,QAAL,GACA,CADA,GAEAC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKL,GAAd,CAAT,EAA6B,CAA7B,CAFA,GAGAG,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKJ,GAAd,CAAT,EAA6B,CAA7B,CAJF;AAKA0B,IAAAA,QAAQ,CAACK,YAAT,GAAwBR,IAAxB;AACD;AACF;;AAED,SAASN,6BAAT,CAAuCM,IAAvC,EAA6C7B,IAA7C,EAAmD;AACjD,QAAMoC,kBAAkB,GAAGH,0BAA0B,CAACJ,IAAD,EAAO7B,IAAP,CAArD;AADiD,QAEzCK,GAFyC,GAE5BwB,IAF4B,CAEzCxB,GAFyC;AAAA,QAEpCC,GAFoC,GAE5BuB,IAF4B,CAEpCvB,GAFoC;;AAGjD,OAAK,MAAM0B,QAAX,IAAuBI,kBAAvB,EAA2C;AACzCJ,IAAAA,QAAQ,CAACzB,QAAT,GACEsB,IAAI,CAACtB,QAAL,GACA,CADA,GAEAC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKL,GAAd,CAAT,EAA6B,CAA7B,CAFA,GAGAG,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKJ,GAAd,CAAT,EAA6B,CAA7B,CAJF;AAKA0B,IAAAA,QAAQ,CAACK,YAAT,GAAwBR,IAAxB;AACD;AACF;;AAED,SAASL,6BAAT,CAAuCK,IAAvC,EAA6C7B,IAA7C,EAAmD;AACjD,QAAMoC,kBAAkB,GAAGF,0BAA0B,CAACL,IAAD,EAAO7B,IAAP,CAArD;AADiD,QAEzCK,GAFyC,GAE5BwB,IAF4B,CAEzCxB,GAFyC;AAAA,QAEpCC,GAFoC,GAE5BuB,IAF4B,CAEpCvB,GAFoC;;AAGjD,OAAK,MAAM0B,QAAX,IAAuBI,kBAAvB,EAA2C;AACzCJ,IAAAA,QAAQ,CAACzB,QAAT,GACEsB,IAAI,CAACtB,QAAL,GACA,CADA,GAEAC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKL,GAAd,CAAT,EAA6B,CAA7B,CAFA,GAGAG,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,KAAKJ,GAAd,CAAT,EAA6B,CAA7B,CAJF;AAKA0B,IAAAA,QAAQ,CAACK,YAAT,GAAwBR,IAAxB;AACD;AACF;;AAED,SAASjB,WAAT,CAAqBZ,IAArB,EAA2B;AACzB,QAAMsC,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMhC,GAAX,IAAkBN,IAAlB,EAAwB;AACtB,SAAK,MAAM6B,IAAX,IAAmBvB,GAAnB,EAAwB;AACtBgC,MAAAA,KAAK,CAAClB,IAAN,CAAWS,IAAX;AACD;AACF;;AACD,SAAOS,KAAP;AACD,C,CAED;AACA;;;AACA,OAAO,SAASC,2BAAT,CAAqCrC,UAArC,EAAiD;AACtD,QAAMsC,wBAAwB,GAAG,EAAjC;AACA,MAAIC,WAAW,GAAGvC,UAAlB;;AACA,SAAOuC,WAAW,KAAK,IAAvB,EAA6B;AAC3BD,IAAAA,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACJ,YAA1B;AACD;;AACD,SAAOG,wBAAP;AACD","sourcesContent":["// Performs A* algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar2(grid, startNode, finishNode, piece) {\n  const visitedNodesInOrder = [];\n  const { col, row } = startNode;\n  startNode.distance =\n    0 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes); //i think heuristic value for each node needs to be set (showing up as undefined currently)\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    if (piece == \"Rook\") updateUnvisitedNeighborsRook(closestNode, grid);\n    if (piece == \"Bishop\") updateUnvisitedNeighborsBishop(closestNode, grid);\n    if (piece == \"Queen\") updateUnvisitedNeighborsQueen(closestNode, grid);\n    if (piece == \"Horse\") updateUnvisitedNeighborsHorse(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  //need to make this sortNodesByHeuristic\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction getUnvisitedNeighborsBishop(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  //top left\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  //bottom right\n  if (row < grid.length - 1 && col < grid[0].length - 1)\n    neighbors.push(grid[row + 1][col + 1]);\n  //top right\n  if (row > 0 && col < grid[0].length - 1)\n    neighbors.push(grid[row - 1][col + 1]);\n  //bottom left\n  if (col > 0 && row < grid.length - 1) neighbors.push(grid[row + 1][col - 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsQueen(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  //diagonals\n  if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\n  if (row < grid.length - 1 && col < grid[0].length - 1)\n    neighbors.push(grid[row + 1][col + 1]);\n  if (row > 0 && col < grid[0].length - 1)\n    neighbors.push(grid[row - 1][col + 1]);\n  if (col < grid[0].length - 1 && row < grid.length - 1)\n    neighbors.push(grid[row + 1][col + 1]);\n  //horizontal/verticals\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getUnvisitedNeighborsHorse(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  //upper left\n  if (row - 1 > 0 && col > 0) neighbors.push(grid[row - 2][col - 1]);\n  if (row > 0 && col - 1 > 0) neighbors.push(grid[row - 1][col - 2]);\n  //upper right\n  if (row - 1 > 0 && col < grid[0].length)\n    neighbors.push(grid[row - 2][col + 1]);\n  if (row > 0 && col + 1 < grid[0].length)\n    neighbors.push(grid[row - 1][col + 2]);\n  //lower left\n  if (col - 1 > 0 && row < grid.length - 1)\n    neighbors.push(grid[row + 1][col - 2]);\n  if (col > 0 && row + 1 < grid.length - 1)\n    neighbors.push(grid[row + 2][col - 1]);\n  //lower right\n  if (row + 1 < grid.length - 1 && col < grid[0].length - 1)\n    neighbors.push(grid[row + 2][col + 1]);\n  if (row < grid.length - 1 && col + 1 < grid[0].length - 1)\n    neighbors.push(grid[row + 1][col + 2]);\n\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\n//rook\nfunction getUnvisitedNeighborsRook(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction updateUnvisitedNeighborsRook(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighborsRook(node, grid);\n  const { col, row } = node;\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance =\n      node.distance +\n      1 +\n      Math.pow(Math.abs(39 - col), 2) +\n      Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction updateUnvisitedNeighborsBishop(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighborsBishop(node, grid);\n  const { col, row } = node;\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance =\n      node.distance +\n      1 +\n      Math.pow(Math.abs(39 - col), 2) +\n      Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction updateUnvisitedNeighborsQueen(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighborsQueen(node, grid);\n  const { col, row } = node;\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance =\n      node.distance +\n      1 +\n      Math.pow(Math.abs(39 - col), 2) +\n      Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction updateUnvisitedNeighborsHorse(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighborsHorse(node, grid);\n  const { col, row } = node;\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance =\n      node.distance +\n      1 +\n      Math.pow(Math.abs(39 - col), 2) +\n      Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}