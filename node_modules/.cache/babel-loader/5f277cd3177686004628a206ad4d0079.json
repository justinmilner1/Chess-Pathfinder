{"ast":null,"code":"// Performs A* algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar2(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByHeuristic(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    console.log(closestNode.heuristic); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByHeuristic(unvisitedNodes) {\n  //need to make this sortNodesByHeuristic\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.heuristic - nodeB.heuristic);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  const col = node.col,\n        row = node.row;\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n    neighbor.heuristic = Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n    console.log(\"col: \" + col);\n    console.log(\"row:\" + row);\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/algorithms/AStar2.js"],"names":["AStar2","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByHeuristic","closestNode","shift","console","log","heuristic","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","col","row","neighbor","previousNode","Math","pow","abs","neighbors","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["// Performs A* algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar2(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByHeuristic(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    console.log(closestNode.heuristic);\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByHeuristic(unvisitedNodes) {\n  //need to make this sortNodesByHeuristic\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.heuristic - nodeB.heuristic);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  const { col, row } = node;\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n    neighbor.heuristic =\n      Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n    console.log(\"col: \" + col);\n    console.log(\"row:\" + row);\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}