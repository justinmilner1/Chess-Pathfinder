{"ast":null,"code":"// Performs A* algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar2(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const col = startNode.col,\n        row = startNode.row;\n  startNode.distance = 0 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes); //i think heuristic value for each node needs to be set (showing up as undefined currently)\n\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  //need to make this sortNodesByHeuristic\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  const col = node.col,\n        row = node.row;\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/justinmilner/Documents/GitHub/pathfindingapp/justinmilner1.github.io/src/algorithms/AStar2.js"],"names":["AStar2","grid","startNode","finishNode","visitedNodesInOrder","col","row","distance","Math","pow","abs","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["// Performs A* algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar2(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const { col, row } = startNode;\n  startNode.distance =\n    0 + Math.pow(Math.abs(39 - col), 2) + Math.pow(Math.abs(10 - row), 2);\n\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes); //i think heuristic value for each node needs to be set (showing up as undefined currently)\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  //need to make this sortNodesByHeuristic\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  const { col, row } = node;\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance =\n      node.distance +\n      1 +\n      Math.pow(Math.abs(39 - col), 2) +\n      Math.pow(Math.abs(10 - row), 2);\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}