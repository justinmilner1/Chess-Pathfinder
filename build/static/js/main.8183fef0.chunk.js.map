{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","components/Node.jsx","algorithms/dijkstra.js","components/PathfindingVisualizer.jsx","App.js","index.js"],"names":["NavBar","state","isOpen","toggleOpen","setState","menuClass","this","props","selectAlgorithm","className","id","onClick","onAlgorithm","type","data-toggle","aria-haspopup","aria-labelledby","onPiece","Component","Counter","counter","onDecrement","onDelete","onIncrement","getBadgeClasses","formatCount","getName","classes","count","value","Counters","onReset","counters","map","key","Node","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","mouseIsPressed","getInitialGrid","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","onAlgoSpeed","document","getElementById","onShortestPathSpeed","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","algorithm","visualizeDijkstra","onAlgo","onPiece2","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","algoSpeed","shortestPathSpeed","piece","algo","console","log","selectPiece","p","handleIncrement","index","indexOf","handleDecrement","handleReset","c","handleDelete","counterId","getSpeed","Fragment","totalCounters","ReactDom","render"],"mappings":"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","file":"static/js/main.8183fef0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./navbar.css\";\n\nclass NavBar extends Component {\n  state = {\n    isOpen: false\n  };\n\n  toggleOpen = () => this.setState({ isOpen: !this.state.isOpen });\n\n  render() {\n    const { selectAlgorithm } = this.props; //think i can delete this\n    const dij = \"dijkstra\";\n    const menuClass = `dropdown-menu${this.state.isOpen ? \" show\" : \"\"}`;\n    return (\n      <nav className=\"navbar navbar-light bg-light\">\n        <a className=\"navbar-brand\">Chess Pathfinder </a>\n\n        <div id=\"dijkstraButton\">\n          <button\n            onClick={() => this.props.onAlgorithm(\"Dijkstra\")}\n            className=\"btn btn-secondary\"\n            type=\"button\"\n          >\n            Dijkstra\n          </button>\n        </div>\n\n        <button\n          id=\"a*Button\"\n          onClick={() => this.props.onAlgorithm(\"A*\")}\n          className=\"btn btn-secondary\"\n          type=\"button\"\n        >\n          A*\n        </button>\n\n        <div className=\"dropdown\" onClick={this.toggleOpen}>\n          <button\n            className=\"btn btn-secondary dropdown-toggle\"\n            type=\"button\"\n            id=\"dropdownMenuButton\"\n            data-toggle=\"dropdown\"\n            aria-haspopup=\"true\"\n          >\n            Choose a piece:\n          </button>\n          <div className={menuClass} aria-labelledby=\"dropdownMenuButton\">\n            <a\n              className=\"dropdown-item\"\n              onClick={() => this.props.onPiece(\"Rook\")}\n            >\n              Rook\n            </a>\n            <a\n              className=\"dropdown-item\"\n              onClick={() => this.props.onPiece(\"Bishop\")}\n            >\n              Bishop\n            </a>\n            <a\n              className=\"dropdown-item\"\n              onClick={() => this.props.onPiece(\"Queen\")}\n            >\n              Queen\n            </a>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n\n{\n  /* <nav className=\"navbar navbar-light bg-light\">\n  <a className=\"navbar-brand\" href=\"#\">\n    Chess Pathfinder{\" \"}\n    <span className=\"badge badge-pill badge-secondary\">{totalCounters}</span>\n  </a>\n</nav>; */\n}\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  render() {\n    const { counter, onDelete, onDecrement, onIncrement } = this.props;\n\n    return (\n      <div>\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <a className=\"btn btn-primary btn-sm m-2\">{this.getName()}</a>\n        <button\n          onClick={() => onIncrement(counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          +\n        </button>\n        <button\n          onClick={() => onDecrement(counter)}\n          className=\"btn btn-secondary btn-sm m-2\"\n        >\n          -\n        </button>\n      </div>\n    );\n  }\n\n  getName() {\n    var cars = [\"Walls\", \"Speed\"];\n    return cars[this.props.counter.id - 1];\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value: count } = this.props.counter;\n    if (count === 5) return \"5 (Max)\";\n    return count === 0 ? \"0 (Min)\" : count;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    const {\n      onReset,\n      counters,\n      onDelete,\n      onDecrement,\n      onIncrement\n    } = this.props;\n\n    return (\n      <div>\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\n          Reset\n        </button>\n        {counters.map(counter => (\n          <Counter\n            key={counter.id}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            onDecrement={onDecrement}\n            counter={counter}\n          ></Counter>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row\n    } = this.props;\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  //will adjust neighbors for dif chess pieces\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node.jsx\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\n\nimport \"./PathfindingVisualizer.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 11;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 39;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, this.props.onAlgoSpeed * i); //change 10 to algoSpeedVar\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, this.props.onAlgoSpeed * i); //change 10 to algoSpeedVar\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, this.props.onShortestPathSpeed * i); //change 50 to shortestPathVar\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  getAlgorithm() {\n    return this.props.algorithm;\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <div>\n        <button\n          className=\"btn btn-primary btn-sm m-2\"\n          onClick={() => this.visualizeDijkstra()}\n        >\n          Visualize {this.props.onAlgo} with {this.props.onPiece2}\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\nimport \"./App.css\";\nimport { dijkstra } from \"./algorithms/dijkstra\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 }\n    ],\n    algoSpeed: 10,\n    shortestPathSpeed: 20,\n    algorithm: \"Dijkstra\",\n    piece: \"Rook\"\n  };\n\n  selectAlgorithm = algo => {\n    this.state.algorithm = algo;\n    this.setState({ algo });\n    console.log(this.state.algorithm);\n  };\n\n  selectPiece = p => {\n    this.state.piece = p;\n    this.setState({ p });\n    console.log(this.state.piece);\n  };\n\n  handleIncrement = counter => {\n    //updating counters\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    if (counters[index].value == 5) return;\n    counters[index] = { ...counter };\n    counters[index].value++;\n    console.log(this.state.counters[0]);\n    this.setState({ counters });\n\n    //updating speed\n    if (counter.id == 2) {\n      this.state.algoSpeed -= 1;\n      this.state.shortestPathSpeed -= 2;\n    }\n    //or updating density\n  };\n\n  handleDecrement = counter => {\n    //updating counters\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    if (counters[index].value == 0) return;\n    counters[index] = { ...counter };\n    counters[index].value--;\n    console.log(this.state.counters[0]);\n    this.setState({ counters });\n\n    //updating speed\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  getSpeed = () => {\n    return this.state.counters[0].value;\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          onAlgorithm={this.selectAlgorithm}\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n          onPiece={this.selectPiece}\n        />\n        <div id=\"body\">\n          <main className=\"container\">\n            <Counters\n              counters={this.state.counters}\n              onReset={this.handleReset}\n              onIncrement={this.handleIncrement}\n              onDecrement={this.handleDecrement}\n              onDelete={this.handleDelete}\n            />\n          </main>\n          <PathfindingVisualizer\n            onAlgoSpeed={this.state.algoSpeed}\n            onShortestPathSpeed={this.state.shortestPathSpeed}\n            onAlgo={this.state.algorithm}\n            onPiece2={this.state.piece}\n          ></PathfindingVisualizer>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDom.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}